name: File Size

on: [pull_request]

jobs:
  build_master:
    name: Build Master
    runs-on: ubuntu-latest
    steps:
      # Shared Setup
      - uses: actions/checkout@v2
        with:
          ref: master
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      # TODO: Leverage cache to avoid building `master` more than once
      - run: yarn install
      - uses: actions/upload-artifact@v1
        with:
          name: master-dist
          path: dist

  build_pr:
    name: Build PR
    runs-on: ubuntu-latest
    steps:
      # Shared Setup
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - run: yarn install
      - uses: actions/upload-artifact@v1
        with:
          name: pr-dist
          path: dist

  report:
    name: Report Sizes
    runs-on: ubuntu-latest
    needs: [build_master, build_pr]
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: master-dist
          path: master-dist
      - uses: actions/download-artifact@v1
        with:
          name: pr-dist
          path: pr-dist
      - name: G-Zip Files
        run: gzip -k master-dist/fluid-tailwind.min.css pr-dist/fluid-tailwind.min.css
      - name: Get size of Master
        id: master-size
        run: |
          echo "::set-output name=base::$(du -k master-dist/fluid-tailwind.css | cut -f1)"
          echo "::set-output name=minified::$(du -k master-dist/fluid-tailwind.min.css | cut -f1)"
          echo "::set-output name=gzip::$(du -k master-dist/fluid-tailwind.min.css.gz | cut -f1)"
      - name: Get size of PR
        id: pr-size
        run: |
          echo "::set-output name=base::$(du -k pr-dist/fluid-tailwind.css | cut -f1)"
          echo "::set-output name=minified::$(du -k pr-dist/fluid-tailwind.min.css | cut -f1)"
          echo "::set-output name=gzip::$(du -k pr-dist/fluid-tailwind.min.css.gz | cut -f1)"
      - name: Post Comment
        if: steps.master-size.outputs.base != steps.pr-size.outputs.base
        uses: unsplash/comment-on-pr@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          msg: |
            | Build | **fluid-tailwind.css** | **fluid-tailwind.min.css** | **fluid-tailwind.min.css.gz** |
            | :-- | :-- | :-- | :-- |
            | `master` | ${{ steps.master-size.outputs.base }} KB | ${{ steps.master-size.outputs.minified }} KB | ${{ steps.master-size.outputs.gzip }} KB |
            | PR Size | ${{ steps.pr-size.outputs.base }} KB | ${{ steps.pr-size.outputs.minified }} KB | ${{ steps.pr-size.outputs.gzip }} KB |
